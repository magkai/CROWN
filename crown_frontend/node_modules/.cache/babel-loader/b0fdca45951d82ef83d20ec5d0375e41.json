{"ast":null,"code":"var _jsxFileName = \"/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport QuestionForm from './QuestionForm';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      answers: [],\n      turn: -1\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          questions = _this$state.questions,\n          answers = _this$state.answers,\n          turn = _this$state.turn;\n\n    if (turn > 0) {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        question: questions,\n        answers: answers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\n;\n\nconst TableBody = props => {\n  const rows = props.answers.map((answer, index) => {\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Rank \", index, \" : \", answer));\n  });\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Result for: \", props.question))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, rows));\n};\n\nconst handleSubmit = question => {\n  this.setState({\n    questions: [...this.state.questions, question]\n  });\n  var jsonanswer = [\"quack\", \"blub\", \"hi\"];\n  fetch(\"http://localhost:5000/getanswer\", {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      credentials: 'same-origin'\n    },\n    method: 'post',\n    body: JSON.stringify({\n      \"questions\": this.state.questions\n    })\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      console.log(\"error case:\", response);\n      throw new Error('Something went wrong ...');\n    }\n  }).then(data => this.setState({\n    answers: [...this.state.answers, data.answers]\n  })).catch(error => this.setState({\n    error\n  }));\n  console.log(this.state.answers[0][1]);\n  this.setState({\n    turn: this.state.turn + 1\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js"],"names":["React","Component","Table","Form","QuestionForm","App","state","questions","answers","turn","render","handleSubmit","TableBody","props","rows","map","answer","index","question","setState","jsonanswer","fetch","headers","credentials","method","body","JSON","stringify","then","response","ok","json","console","log","Error","data","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\nimport QuestionForm from './QuestionForm'\n\n\n\n\nclass App extends Component {\n  state = {\n    questions:  [],\n      answers: [],\n      turn: -1\n    };\n    \n  \n  \n\n\n\n render() {\n     const {questions, answers, turn } = this.state;\n    if(turn > 0) {\n        return (\n        <div className=\"container\">\n        <Form handleSubmit={handleSubmit} /> \n       <TableBody  question={questions} answers={answers}/>\n        </div>\n      ); \n    }else {\n          return (\n        <div className=\"container\">\n        <Form handleSubmit={handleSubmit} /> \n        </div>\n      ); \n    }\n    \n  }\n  \n};\n\n  \nconst TableBody = props  => {\n    \n      const rows = props.answers.map((answer, index) => {\n         return(\n         <tr key={index}>\n                    \n                    <td>Rank {index} : {answer}</td>\n                </tr>\n                );\n     });\n    \n     return (\n \n             <table>\n                <thead>\n                    <tr>\n                        <th>Result for: {props.question}</th>\n                    </tr>\n                </thead>\n                <tbody>{rows}</tbody>\n            </table>\n            );\n    \n  };\n  \n  \n    const handleSubmit = question => {\n    this.setState({ questions: [...this.state.questions,question] });\n    var jsonanswer = [\"quack\", \"blub\", \"hi\"];\n    \n    fetch(\"http://localhost:5000/getanswer\", {\n         headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json', credentials: 'same-origin'},\n\n    method: 'post', body: JSON.stringify({\"questions\" : this.state.questions })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            console.log(\"error case:\", response);\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data =>this.setState({ answers:  [...this.state.answers,data.answers] }))\n      .catch(error => this.setState({ error }));\n      \n      console.log(this.state.answers[0][1])\n      this.setState({turn: this.state.turn+1});\n    }\n  \nexport default App\n"]},"metadata":{},"sourceType":"module"}