{"ast":null,"code":"var _jsxFileName = \"/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Form from './Form';\nimport Options from './Options';\nimport './index.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOptionChange = (optionId, value) => {\n      this.setState({\n        [optionId]: value\n      });\n    };\n\n    this.validateState = () => {\n      errMessage = \"\";\n\n      if (this.state.retNbr < 1 || this.state.retNbr > 20) {\n        errMessage = \"Returned Results must lie between 1 and 20.\";\n      }\n\n      this.setState({\n        err: errMessage\n      });\n      return errMessage;\n    };\n\n    this.handleSubmit = question => {\n      this.setState({\n        err: \"\"\n      });\n      const errMessage = this.validateState();\n\n      if (errMessage !== \"\") {\n        return;\n      } //this.setState({ questions: [...this.state.questions,question] }, () => {\n\n\n      if (question !== null) {\n        fetch(\"http://139.19.51.11:5000/getanswer\", {\n          // fetch(\"http://localhost:5000/getanswer\", {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            credentials: 'same-origin'\n          },\n          method: 'post',\n          body: JSON.stringify({\n            \"questions\": [...this.state.questions, question]\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            console.log(\"ERROR when calling REST Api, response was:\" + response); //throw new Error('ERROR when calling REST Api');\n            //   this.setState({ answers:  [...this.state.answers,\"ERROR while calling REST API\"] }, () => {\n            //  this.setState({turn: this.state.turn+1});\n            //  })\n          }\n        }).then(data => this.setState({\n          questions: [...this.state.questions, question],\n          answers: [...this.state.answers, data],\n          turn: this.state.turn + 1 //, () => { this.setState({turn: this.state.turn+1});\n\n        })).catch(error => this.setState({\n          error: error\n        }, () => {\n          console.log(\"ERROR when calling REST Api: \" + error); //this.setState({ answers:  [...this.state.answers,[\"ERROR while calling REST API\"]] }, () => {\n          //this.setState({turn: this.state.turn+1});\n          //})\n        }));\n      } // });\n\n    };\n\n    this.handleClearConv = () => {\n      console.log(\"in clear conv\");\n      this.setState(this.initialState);\n    };\n\n    this.initialState = {\n      questions: [],\n      answers: [],\n      turn: -1,\n      retNbr: 3,\n      indriRetNbr: 100,\n      nodeThreshold: 0.75,\n      edgeThreshold: 0.0,\n      convquery: \"conv_uw\",\n      h1: 0.6,\n      h2: 0.3,\n      h3: 0.1,\n      err: \"\"\n    };\n    this.state = this.initialState;\n  } // state = {\n  //   questions:  [],\n  //   answers: [],\n  //turn: -1\n  //};\n  // prev_questions = []\n  //prev_answers = []\n  // prev_turn = -1\n\n\n  render() {\n    //const {questions, answers, retnbr, indriretnbr, nodethreshold, edgethreshold, indriscore, nodescore, edgescore} = this.state;\n    //if(this.state.questions.length > 0 && this.state.questions.length === this.state.answers.length ) {\n    //if(this.state.turn !== -1) {\n    console.log(\"in if\");\n    return (//  <div className=\"container\">\n      //     <Form handleSubmit={this.handleSubmit} onSubmit={this.handleSubmit} handleClearConv={this.handleClearConv} />      \n      //      <TableBody questions={this.state.questions} answers={this.state.answers}/>\n      React.createElement(\"div\", {\n        className: \"flex-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.state.err && console.log(this.state.err)), React.createElement(\"div\", {\n        className: \"flex-large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: this.handleSubmit,\n        onSubmit: this.handleSubmit,\n        handleClearConv: this.handleClearConv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        questions: this.state.questions,\n        answers: this.state.answers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"small-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex-small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Options, {\n        onChange: this.handleOptionChange,\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))))\n    ); // }else {\n    ///    console.log(\"in else\")\n    //    return (\n    //     <div className=\"container\">\n    //     <Form handleSubmit={this.handleSubmit} handleClearConv={this.handleClearConv}  /> \n    //     <TableBody questions={questions.splice(0, questions.length-1)} answers={this.state.answers}/>\n    //     </div>\n    //   ); \n    //}\n    //   return (\n    //   <div class=\"flex-row\">\n    //       <div class=\"flex-small\"></div>\n    //    <div class=\"flex-small\"></div>\n    // </div>\n    // );\n  }\n\n}\n\nconst TableBody = props => {\n  const questions = props.questions,\n        answers = props.answers;\n  console.log(\"in tablebody, questions: \" + questions);\n  console.log(\"in tablebody, answers: \" + answers);\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, [...questions].reverse().map((question, index) => {\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(InnerTable, {\n      question: question,\n      answers: [...answers].reverse()[index],\n      nbr: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })));\n  })));\n};\n\nconst InnerTable = props => {\n  const question = props.question,\n        answers = props.answers,\n        nbr = props.nbr;\n  const rows = answers.map((answer, index) => {\n    return React.createElement(\"tr\", {\n      key: \"\".concat(nbr.toString()).concat(\"_\").concat(index.toString()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Rank \", index, \" : \"), answer));\n  });\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    key: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"Result for: \", question))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, rows));\n};\n\nexport default App;","map":{"version":3,"sources":["/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js"],"names":["React","Component","Form","Options","App","constructor","props","handleOptionChange","optionId","value","setState","validateState","errMessage","state","retNbr","err","handleSubmit","question","fetch","headers","credentials","method","body","JSON","stringify","questions","then","response","ok","json","console","log","data","answers","turn","catch","error","handleClearConv","initialState","indriRetNbr","nodeThreshold","edgeThreshold","convquery","h1","h2","h3","render","TableBody","reverse","map","index","InnerTable","nbr","rows","answer","concat","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,aAAP;;AAMA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAE3BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAChB,UAAMA,KAAN;;AADgB,SA+BhBC,kBA/BgB,GA+BK,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACtC,WAAKC,QAAL,CAAc;AAAE,SAACF,QAAD,GAAYC;AAAd,OAAd;AACH,KAjCe;;AAAA,SAmChBE,aAnCgB,GAmCA,MAAM;AAClBC,MAAAA,UAAU,GAAG,EAAb;;AACA,UAAG,KAAKC,KAAL,CAAWC,MAAX,GAAoB,CAApB,IAAyB,KAAKD,KAAL,CAAWC,MAAX,GAAoB,EAAhD,EAAoD;AACjDF,QAAAA,UAAU,GAAG,6CAAb;AACF;;AACD,WAAKF,QAAL,CAAc;AAACK,QAAAA,GAAG,EAAEH;AAAN,OAAd;AACA,aAAOA,UAAP;AACH,KA1Ce;;AAAA,SA6ChBI,YA7CgB,GA6CDC,QAAQ,IAAI;AACvB,WAAKP,QAAL,CAAc;AAACK,QAAAA,GAAG,EAAE;AAAN,OAAd;AACA,YAAMH,UAAU,GAAG,KAAKD,aAAL,EAAnB;;AACA,UAAGC,UAAU,KAAK,EAAlB,EAAsB;AAClB;AACH,OALsB,CAOvB;;;AACA,UAAIK,QAAQ,KAAK,IAAjB,EAAuB;AACnBC,QAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC9C;AACOC,UAAAA,OAAO,EAAE;AACd,sBAAU,kBADI;AAEd,4BAAgB,kBAFF;AAEsBC,YAAAA,WAAW,EAAE;AAFnC,WAF8B;AAM5CC,UAAAA,MAAM,EAAE,MANoC;AAM5BC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,yBAAc,CAAC,GAAG,KAAKX,KAAL,CAAWY,SAAf,EAAyBR,QAAzB;AAAf,WAAf;AANsB,SAAvC,CAAL,CAOKS,IAPL,CAOUC,QAAQ,IAAI;AAClB,cAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,mBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,WAFD,MAEO;AACHC,YAAAA,OAAO,CAACC,GAAR,CAAY,+CAA+CJ,QAA3D,EADG,CAEL;AACH;AACG;AAEA;AACD;AACF,SAlBH,EAmBGD,IAnBH,CAmBQM,IAAI,IAAG,KAAKtB,QAAL,CAAc;AAACe,UAAAA,SAAS,EAAE,CAAC,GAAG,KAAKZ,KAAL,CAAWY,SAAf,EAA0BR,QAA1B,CAAZ;AACtBgB,UAAAA,OAAO,EAAG,CAAC,GAAG,KAAKpB,KAAL,CAAWoB,OAAf,EAAuBD,IAAvB,CADY;AACkBE,UAAAA,IAAI,EAAE,KAAKrB,KAAL,CAAWqB,IAAX,GAAgB,CADxC,CAE1B;;AAF0B,SAAd,CAnBf,EAwBGC,KAxBH,CAwBSC,KAAK,IAAI,KAAK1B,QAAL,CAAc;AAAC0B,UAAAA,KAAK,EAAEA;AAAR,SAAd,EAA+B,MAAM;AACjDN,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCK,KAA9C,EADiD,CAEjD;AACE;AAEA;AACL,SANe,CAxBlB;AA+BD,OAxCoB,CA0CxB;;AAEF,KAzFe;;AAAA,SA4FhBC,eA5FgB,GA4FE,MAAM;AACpBP,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,WAAKrB,QAAL,CAAc,KAAK4B,YAAnB;AACH,KA/Fe;;AAGhB,SAAKA,YAAL,GAAoB;AAChBb,MAAAA,SAAS,EAAG,EADI;AAEhBQ,MAAAA,OAAO,EAAE,EAFO;AAGhBC,MAAAA,IAAI,EAAE,CAAC,CAHS;AAIhBpB,MAAAA,MAAM,EAAE,CAJQ;AAKhByB,MAAAA,WAAW,EAAE,GALG;AAMhBC,MAAAA,aAAa,EAAE,IANC;AAOhBC,MAAAA,aAAa,EAAE,GAPC;AAQhBC,MAAAA,SAAS,EAAE,SARK;AAShBC,MAAAA,EAAE,EAAE,GATY;AAUhBC,MAAAA,EAAE,EAAE,GAVY;AAWhBC,MAAAA,EAAE,EAAE,GAXY;AAYhB9B,MAAAA,GAAG,EAAE;AAZW,KAApB;AAgBA,SAAKF,KAAL,GAAa,KAAKyB,YAAlB;AACD,GAtByB,CAuBzB;AACE;AACE;AACG;AACF;AAEJ;AACC;AACD;;;AAsEAQ,EAAAA,MAAM,GAAG;AAEN;AAEA;AACC;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,WAEE;AACC;AACD;AACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKlB,KAAL,CAAWE,GAAX,IAAkBe,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWE,GAAvB,CAAxB,CADD,EAEI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,YAAY,EAAE,KAAKC,YAAzB;AAAuC,QAAA,QAAQ,EAAE,KAAKA,YAAtD;AAAoE,QAAA,eAAe,EAAE,KAAKqB,eAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,KAAKxB,KAAL,CAAWY,SAAjC;AAA4C,QAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWoB,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAFJ,EAOI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAK1B,kBAAxB;AAA4C,QAAA,KAAK,EAAE,KAAKM,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CAPJ;AALJ,MARK,CA6BP;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACA;AACA;AACI;AACD;AAEF;AACA;;AAlJuB;;AAuJ5B,MAAMkC,SAAS,GAAGzC,KAAK,IAAK;AAAA,QAElBmB,SAFkB,GAEInB,KAFJ,CAElBmB,SAFkB;AAAA,QAEPQ,OAFO,GAEI3B,KAFJ,CAEP2B,OAFO;AAIzBH,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BN,SAA1C;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BE,OAAxC;AAGC,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAAC,GAAGR,SAAJ,EAAeuB,OAAf,GAAyBC,GAAzB,CAA6B,CAAChC,QAAD,EAAWiC,KAAX,KAAqB;AAC/C,WACG;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAEjC,QAAtB;AAAgC,MAAA,OAAO,EAAE,CAAC,GAAGgB,OAAJ,EAAae,OAAb,GAAuBE,KAAvB,CAAzC;AAAwE,MAAA,GAAG,EAAEA,KAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,CADH;AAOE,GARL,CADF,CADJ,CADJ;AAkBH,CA1BD;;AA6BA,MAAMC,UAAU,GAAG7C,KAAK,IAAI;AAAA,QAEjBW,QAFiB,GAESX,KAFT,CAEjBW,QAFiB;AAAA,QAEPgB,OAFO,GAES3B,KAFT,CAEP2B,OAFO;AAAA,QAEEmB,GAFF,GAES9C,KAFT,CAEE8C,GAFF;AAIxB,QAAMC,IAAI,GAAGpB,OAAO,CAACgB,GAAR,CAAY,CAACK,MAAD,EAASJ,KAAT,KAAmB;AACxC,WACI;AAAI,MAAA,GAAG,EAAE,GAAGK,MAAH,CAAUH,GAAG,CAACI,QAAJ,EAAV,EAA0BD,MAA1B,CAAiC,GAAjC,EAAsCA,MAAtC,CAA6CL,KAAK,CAACM,QAAN,EAA7C,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAASN,KAAT,QAAJ,EAA2BI,MAA3B,CADJ,CADJ;AAOH,GARY,CAAb;AAUA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAI,IAAA,GAAG,EAAErC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAiBA,QAAjB,CADJ,CADL,CADH,EAMG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQoC,IAAR,CANH,CADJ;AAWH,CAzBD;;AA0BA,eAAejD,GAAf","sourcesContent":["import React, { Component } from 'react'\n\nimport Form from './Form'\nimport Options from './Options'\nimport './index.css'\n \n\n\n\n\nclass App extends Component {\n  \n constructor(props) {\n    super(props);\n\n    this.initialState = {\n        questions:  [],\n        answers: [],\n        turn: -1,\n        retNbr: 3,\n        indriRetNbr: 100,\n        nodeThreshold: 0.75,\n        edgeThreshold: 0.0,\n        convquery: \"conv_uw\",\n        h1: 0.6,\n        h2: 0.3,\n        h3: 0.1,\n        err: \"\"\n                \n    };\n\n    this.state = this.initialState;\n  }\n   // state = {\n     //   questions:  [],\n       //   answers: [],\n          //turn: -1\n        //};\n        \n    // prev_questions = []\n     //prev_answers = []\n    // prev_turn = -1\n        \n    handleOptionChange = (optionId, value) => {\n        this.setState({ [optionId]: value });\n    }\n    \n    validateState = () => {\n        errMessage = \"\";\n        if(this.state.retNbr < 1 || this.state.retNbr > 20) {\n           errMessage = \"Returned Results must lie between 1 and 20.\";\n        }\n        this.setState({err: errMessage});\n        return errMessage;\n    }\n\n    \n    handleSubmit = question => { \n        this.setState({err: \"\"});\n        const errMessage = this.validateState()\n        if(errMessage !== \"\") {\n            return;\n        }\n     \n        //this.setState({ questions: [...this.state.questions,question] }, () => {\n        if (question !== null) {\n            fetch(\"http://139.19.51.11:5000/getanswer\", {\n          // fetch(\"http://localhost:5000/getanswer\", {\n                 headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json', credentials: 'same-origin'},\n\n            method: 'post', body: JSON.stringify({\"questions\" : [...this.state.questions,question] })\n              }).then(response => {\n                if (response.ok) {\n                  return response.json();\n                } else {\n                    console.log(\"ERROR when calling REST Api, response was:\" + response);\n                  //throw new Error('ERROR when calling REST Api');\n               //   this.setState({ answers:  [...this.state.answers,\"ERROR while calling REST API\"] }, () => {\n                  //  this.setState({turn: this.state.turn+1});\n                  \n                  //  })\n                }\n              })\n              .then(data =>this.setState({questions: [...this.state.questions, question],\n                   answers:  [...this.state.answers,data], turn: this.state.turn+1 }\n               //, () => { this.setState({turn: this.state.turn+1});\n                  \n              ))\n              .catch(error => this.setState({error: error }, () => {\n                  console.log(\"ERROR when calling REST Api: \" + error);\n                  //this.setState({ answers:  [...this.state.answers,[\"ERROR while calling REST API\"]] }, () => {\n                    //this.setState({turn: this.state.turn+1});\n                  \n                    //})\n              }));\n          }\n\n       // });\n    \n    }\n \n    \n    handleClearConv = () => {\n        console.log(\"in clear conv\")\n        this.setState(this.initialState)\n    }\n\n\n\n    render() {\n      \n       //const {questions, answers, retnbr, indriretnbr, nodethreshold, edgethreshold, indriscore, nodescore, edgescore} = this.state;\n\n       //if(this.state.questions.length > 0 && this.state.questions.length === this.state.answers.length ) {\n        //if(this.state.turn !== -1) {\n        console.log(\"in if\")\n        \n        return (\n           \n          //  <div className=\"container\">\n           //     <Form handleSubmit={this.handleSubmit} onSubmit={this.handleSubmit} handleClearConv={this.handleClearConv} />      \n          //      <TableBody questions={this.state.questions} answers={this.state.answers}/>\n            <div className=\"flex-row\">\n             <div>{this.state.err && console.log(this.state.err)}</div>\n                <div className=\"flex-large\">\n                    <Form handleSubmit={this.handleSubmit} onSubmit={this.handleSubmit} handleClearConv={this.handleClearConv} />      \n                    <TableBody questions={this.state.questions} answers={this.state.answers}/>\n\n                </div>\n                <div className=\"small-container\">\n                    <div className=\"flex-small\">\n                        <Options onChange={this.handleOptionChange} value={this.state}/>\n                    </div>\n                </div>\n            </div>\n       \n          \n          ); \n      // }else {\n       ///    console.log(\"in else\")\n       //    return (\n       //     <div className=\"container\">\n       //     <Form handleSubmit={this.handleSubmit} handleClearConv={this.handleClearConv}  /> \n       //     <TableBody questions={questions.splice(0, questions.length-1)} answers={this.state.answers}/>\n       //     </div>\n       //   ); \n       //}\n    //   return (\n    //   <div class=\"flex-row\">\n    //       <div class=\"flex-small\"></div>\n        //    <div class=\"flex-small\"></div>\n       // </div>\n        \n     // );\n    };\n}\n\n\n  \nconst TableBody = props  => {\n    \n   const {questions, answers} = props;\n  \n   console.log(\"in tablebody, questions: \" + questions)\n   console.log(\"in tablebody, answers: \" + answers)\n       \n   \n    return (\n        <table> \n            <tbody>\n             {[...questions].reverse().map((question, index) => {\n                 return (\n                    <tr key={index}>\n                        <td>\n                        <InnerTable question={question} answers={[...answers].reverse()[index]} nbr={index}/>\n                        </td>\n                    </tr>\n                     \n                 )})\n            }\n            </tbody>\n        </table>\n    );\n  \n   \n}; \n\n\nconst InnerTable = props => {\n    \n    const {question, answers, nbr} = props\n\n    const rows = answers.map((answer, index) => {\n        return(\n            <tr key={\"\".concat(nbr.toString()).concat(\"_\").concat(index.toString())}>\n                <td><b>Rank {index} : </b>{answer}</td>\n            </tr>\n          \n            \n         );\n    });\n\n    return (\n        <table>\n           <thead>\n                <tr key={question}>\n                    <th>Result for: {question}</th>\n                </tr>\n           </thead>\n           <tbody>{rows}</tbody>\n        </table>\n    )\n       \n};\nexport default App\n"]},"metadata":{},"sourceType":"module"}