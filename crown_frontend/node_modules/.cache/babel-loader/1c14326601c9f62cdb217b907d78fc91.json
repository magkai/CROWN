{"ast":null,"code":"var _jsxFileName = \"/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport QuestionForm from './QuestionForm';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      answers: [],\n      turn: -1\n    };\n\n    this.handleSubmit = question => {\n      this.setState({\n        questions: [...this.state.questions, question]\n      }, () => {\n        fetch(\"http://localhost:5000/getanswer\", {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            credentials: 'same-origin'\n          },\n          method: 'post',\n          body: JSON.stringify({\n            \"questions\": this.state.questions\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            console.log(\"ERROR when calling REST Api, response was:\" + response);\n            throw new Error('ERROR when calling REST Api');\n          }\n        }).then(data => this.setState({\n          answers: [...this.state.answers, data]\n        }, () => {\n          this.setState({\n            turn: this.state.turn + 1\n          });\n        })).catch(error => this.setState({\n          error\n        }, () => {\n          console.log(\"ERROR when calling REST Api: \" + error);\n        }));\n      });\n    };\n  }\n\n  render() {\n    if (this.state.turn >= 0) {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        questions: this.state.questions,\n        answers: this.state.answers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nconst TableBody = props => {\n  const questions = props.questions,\n        answers = props.answers;\n  var tables = [];\n  var i = 0; //for(i = 0; i < questions.length; i++) { \n  // const table = () => {\n  //   const rows = answers[i].map((answer, index) => {\n  //     return(\n  //       <tr key={\"\".concat({index}, \"_\", {i})}>\n  //         <td>Rank {index} : {answer}</td>\n  //   </tr>\n  //);\n  //});\n  // return (\n  //   <table>\n  //    <thead>\n  //       <tr key={'d'}>\n  //         <th>Result for: ggg</th>\n  //   </tr>\n  //</thead>\n  // <tbody>{rows}</tbody>\n  //   </table>\n  // )\n  // }\n  //  tables.push(table);\n\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, questions.map((question, index) => {\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(InnerTable, {\n      question: question,\n      answers: answers[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }))); // };\n  // <tbody><tr key={0}><td>{table}</td></tr></tbody>\n\n  console.log(\"talbes:\" + tables); //const fulltable = tables.map((table, index) => {\n  //  return(\n  //    <tr key={i}>{table}</tr>\n  //  );\n  //  });\n  // return (\n  //   <table>\n  //     <tbody> {\n  //       tables.map((table, index) => {\n  //      return (\n  //       <tr key={{index} }><td>{table}</td></tr>\n  //  )\n  /// }) }\n  // </tbody>\n  //    </table>\n  // );\n};\n\nconst InnerTable = props => {\n  const question = props.question,\n        answers = props.answers;\n  const rows = answers.map((answer, index) => {\n    return React.createElement(\"tr\", {\n      key: \"\".concat({\n        index\n      }, \"_\", 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Rank \", index, \" : \", answer));\n  });\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    key: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Result for: question\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, rows));\n};\n\nexport default App;","map":{"version":3,"sources":["/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js"],"names":["React","Component","Table","Form","QuestionForm","App","state","questions","answers","turn","handleSubmit","question","setState","fetch","headers","credentials","method","body","JSON","stringify","then","response","ok","json","console","log","Error","data","catch","error","render","TableBody","props","tables","i","map","index","InnerTable","rows","answer","concat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\nimport QuestionForm from './QuestionForm'\n\n\n\n\nclass App extends Component {\n  \n \n    state = {\n        questions:  [],\n          answers: [],\n          turn: -1\n        };\n    \n   \n    \n    handleSubmit = question => { \n     \n        this.setState({ questions: [...this.state.questions,question] }, () => {\n\n            fetch(\"http://localhost:5000/getanswer\", {\n                 headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json', credentials: 'same-origin'},\n\n            method: 'post', body: JSON.stringify({\"questions\" : this.state.questions })\n              }).then(response => {\n                if (response.ok) {\n                  return response.json();\n                } else {\n                    console.log(\"ERROR when calling REST Api, response was:\" + response);\n                  throw new Error('ERROR when calling REST Api');\n                }\n              })\n              .then(data =>this.setState({ answers:  [...this.state.answers,data] }, () => {\n                  this.setState({turn: this.state.turn+1});\n              }))\n              .catch(error => this.setState({ error }, () => {\n                  console.log(\"ERROR when calling REST Api: \" + error);\n              }));\n\n\n        });\n    \n    }\n \n    \n    \n\n\n\n    render() {\n\n       if(this.state.turn >= 0) {\n           return (\n            <div className=\"container\">\n            <Form handleSubmit={this.handleSubmit} />      \n            <TableBody questions={this.state.questions} answers={this.state.answers}/>\n            </div>\n          ); \n       }else {\n           return (\n            <div className=\"container\">\n            <Form handleSubmit={this.handleSubmit} /> \n\n            </div>\n          ); \n       }\n      \n    };\n}\n  \nconst TableBody = props  => {\n    \n   const {questions, answers} = props;\n   \n   var tables = [];\n       \n    var i = 0;\n    //for(i = 0; i < questions.length; i++) { \n       // const table = () => {\n         //   const rows = answers[i].map((answer, index) => {\n           //     return(\n             //       <tr key={\"\".concat({index}, \"_\", {i})}>\n               //         <td>Rank {index} : {answer}</td>\n                 //   </tr>\n                 //);\n            //});\n\n           // return (\n             //   <table>\n               //    <thead>\n                 //       <tr key={'d'}>\n                   //         <th>Result for: ggg</th>\n                     //   </tr>\n                   //</thead>\n                  // <tbody>{rows}</tbody>\n             //   </table>\n           // )\n       // }\n            \n       //  tables.push(table);\n    return (\n        <table> \n            <tbody>\n             {questions.map((question, index) => {\n                 return (\n                    <tr key={index}>\n                        <td>\n                        <InnerTable question={question} answers={answers[index]}/>\n                        </td>\n                    </tr>\n                     \n                 )})\n            }\n            </tbody>\n        </table>\n    );\n    // };\n     \n     // <tbody><tr key={0}><td>{table}</td></tr></tbody>\n    \n    console.log(\"talbes:\" + tables)\n    \n    //const fulltable = tables.map((table, index) => {\n      //  return(\n           \n        //    <tr key={i}>{table}</tr>\n          \n       //  );\n   //  });\n     \n   \n   // return (\n     //   <table>\n       //     <tbody> {\n         //       tables.map((table, index) => {\n           //      return (\n             //       <tr key={{index} }><td>{table}</td></tr>\n               //  )\n               /// }) }\n           // </tbody>\n    //    </table>\n   // );\n   \n} \n\n\nconst InnerTable = props => {\n    \n    const {question, answers} = props\n\n    const rows = answers.map((answer, index) => {\n        return(\n            <tr key={\"\".concat({index}, \"_\", 0)}>\n                <td>Rank {index} : {answer}</td>\n            </tr>\n         );\n    });\n\n    return (\n        <table>\n           <thead>\n                <tr key={question}>\n                    <th>Result for: question</th>\n                </tr>\n           </thead>\n           <tbody>{rows}</tbody>\n        </table>\n    )\n       \n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}