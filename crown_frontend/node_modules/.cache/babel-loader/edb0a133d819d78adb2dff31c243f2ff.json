{"ast":null,"code":"var _jsxFileName = \"/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport QuestionForm from './QuestionForm';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = question => {\n      this.setState({\n        questions: [...this.state.questions, question]\n      });\n      var jsonanswer = [\"quack\", \"blub\", \"hi\"];\n      fetch(\"http://localhost:5000/getanswer\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          credentials: 'same-origin'\n        },\n        method: 'post',\n        body: JSON.stringify({\n          \"questions\": this.state.questions\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.log(\"error case:\", response);\n          throw new Error('Something went wrong ...');\n        }\n      }).then(data => this.setState({\n        answers: [...this.state.answers, data.answers]\n      })).catch(error => this.setState({\n        error\n      }));\n      console.log(this.state.answers[0][1]);\n      this.setState({\n        turn: this.state.turn + 1\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Form, {\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), \"this.state && this.state.answers && \", React.createElement(TableBody, {\n      question: this.state.questions,\n      answers: this.state.answers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst TableBody = props => {\n  const rows = props.answers.map((answer, index) => {\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Rank \", index, \" : \", answer));\n  });\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Result for: \", props.question))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, rows));\n};\n\nexport default App;","map":{"version":3,"sources":["/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js"],"names":["React","Component","Table","Form","QuestionForm","App","handleSubmit","question","setState","questions","state","jsonanswer","fetch","headers","credentials","method","body","JSON","stringify","then","response","ok","json","console","log","Error","data","answers","catch","error","turn","render","TableBody","props","rows","map","answer","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\nimport QuestionForm from './QuestionForm'\n\n\n\n\nclass App extends Component {\n  \n  \n    handleSubmit = question => {\n    this.setState({ questions: [...this.state.questions,question] });\n    var jsonanswer = [\"quack\", \"blub\", \"hi\"];\n    \n    fetch(\"http://localhost:5000/getanswer\", {\n         headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json', credentials: 'same-origin'},\n\n    method: 'post', body: JSON.stringify({\"questions\" : this.state.questions })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n            console.log(\"error case:\", response);\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data =>this.setState({ answers:  [...this.state.answers,data.answers] }))\n      .catch(error => this.setState({ error }));\n      \n      console.log(this.state.answers[0][1])\n      this.setState({turn: this.state.turn+1});\n    }\n\n\n\n render() {\n     \n   \n    return (\n        <div className=\"container\">\n        <Form handleSubmit={this.handleSubmit} /> \n        this.state && this.state.answers && <TableBody  question={this.state.questions} answers={this.state.answers}/>\n        </div>\n      ); \n  \n    \n  \n  \n};\n}\n  \nconst TableBody = props  => {\n    \n      const rows = props.answers.map((answer, index) => {\n         return(\n         <tr key={index}>\n                    \n                    <td>Rank {index} : {answer}</td>\n                </tr>\n                );\n     });\n    \n     return (\n \n             <table>\n                <thead>\n                    <tr>\n                        <th>Result for: {props.question}</th>\n                    </tr>\n                </thead>\n                <tbody>{rows}</tbody>\n            </table>\n            );\n    \n  };\n  \n  \nexport default App\n"]},"metadata":{},"sourceType":"module"}