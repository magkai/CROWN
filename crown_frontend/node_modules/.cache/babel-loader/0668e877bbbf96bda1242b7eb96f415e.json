{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePromiseTracker = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _trackPromise = require(\"./trackPromise\");\n\nvar _setupConfig = require(\"./setupConfig\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar usePromiseTracker = function usePromiseTracker() {\n  var outerConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _setupConfig.defaultConfig; // Included in state, it will be evaluated just the first time,\n  // TODO: discuss if this is a good approach\n  // We need to apply defensive programming, ensure area and delay default to secure data\n  // cover cases like not all params informed, set secure defaults\n\n  var _React$useState = _react.default.useState((0, _setupConfig.setupConfig)(outerConfig)),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      config = _React$useState2[0]; // Edge case, when we start the application if we are loading just onComponentDidMount\n  // data, event emitter could have already emitted the event but subscription is not yet\n  // setup\n\n\n  _react.default.useEffect(function () {\n    if (config && config.area && (0, _trackPromise.getCounter)(config.area) > 0) {\n      setInternalPromiseInProgress(true);\n      setPromiseInProgress(true);\n    }\n  }, [config]); // Internal will hold the current value\n\n\n  var _React$useState3 = _react.default.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      internalPromiseInProgress = _React$useState4[0],\n      setInternalPromiseInProgress = _React$useState4[1]; // Promise in progress is 'public', it can be affected by the _delay_ parameter\n  // it may not show the current state\n\n\n  var _React$useState5 = _react.default.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      promiseInProgress = _React$useState6[0],\n      setPromiseInProgress = _React$useState6[1]; // We need to hold a ref to latestInternal, to check the real value on\n  // callbacks (if not we would get always the same value)\n  // more info: https://overreacted.io/a-complete-guide-to-useeffect/\n\n\n  var latestInternalPromiseInProgress = _react.default.useRef(internalPromiseInProgress);\n\n  var notifiyPromiseInProgress = function notifiyPromiseInProgress() {\n    !config || !config.delay || config.delay === 0 ? setPromiseInProgress(true) : setTimeout(function () {\n      // Check here ref to internalPromiseInProgress\n      if (latestInternalPromiseInProgress.current) {\n        setPromiseInProgress(true);\n      }\n    }, config.delay);\n  };\n\n  var updatePromiseTrackerStatus = function updatePromiseTrackerStatus(anyPromiseInProgress, areaAffected) {\n    if (config.area === areaAffected) {\n      setInternalPromiseInProgress(anyPromiseInProgress); // Update the ref object as well, we will check it when we need to\n      // cover the _delay_ case (setTimeout)\n\n      latestInternalPromiseInProgress.current = anyPromiseInProgress;\n\n      if (!anyPromiseInProgress) {\n        setPromiseInProgress(false);\n      } else {\n        notifiyPromiseInProgress();\n      }\n    }\n  };\n\n  _react.default.useEffect(function () {\n    latestInternalPromiseInProgress.current = internalPromiseInProgress;\n\n    _trackPromise.emitter.on(_trackPromise.promiseCounterUpdateEventId, function (anyPromiseInProgress, areaAffected) {\n      updatePromiseTrackerStatus(anyPromiseInProgress, areaAffected);\n    });\n\n    return function () {\n      _trackPromise.emitter.off(_trackPromise.promiseCounterUpdateEventId);\n    };\n  }, []);\n\n  return {\n    promiseInProgress: promiseInProgress\n  };\n};\n\nexports.usePromiseTracker = usePromiseTracker;","map":null,"metadata":{},"sourceType":"script"}