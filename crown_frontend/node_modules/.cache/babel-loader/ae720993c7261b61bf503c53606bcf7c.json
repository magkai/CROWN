{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trackPromise = exports.getCounter = exports.promiseCounterUpdateEventId = exports.emitter = void 0;\n\nvar _tinyEmmiter = require(\"./tinyEmmiter\");\n\nvar _constants = require(\"./constants\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar emitter = new _tinyEmmiter.Emitter();\nexports.emitter = emitter;\nvar promiseCounterUpdateEventId = \"promise-counter-update\";\nexports.promiseCounterUpdateEventId = promiseCounterUpdateEventId;\n\nvar counter = _defineProperty({}, _constants.defaultArea, 0);\n\nvar getCounter = function getCounter(area) {\n  return counter[area];\n};\n\nexports.getCounter = getCounter;\n\nvar trackPromise = function trackPromise(promise, area) {\n  area = area || _constants.defaultArea;\n  incrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n\n  var onResolveHandler = function onResolveHandler() {\n    return decrementPromiseCounter(area);\n  };\n\n  promise.then(onResolveHandler, onResolveHandler);\n  return promise;\n};\n\nexports.trackPromise = trackPromise;\n\nvar incrementCounter = function incrementCounter(area) {\n  if (Boolean(counter[area])) {\n    counter[area]++;\n  } else {\n    counter[area] = 1;\n  }\n};\n\nvar anyPromiseInProgress = function anyPromiseInProgress(area) {\n  return counter[area] > 0;\n};\n\nvar decrementPromiseCounter = function decrementPromiseCounter(area) {\n  decrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n};\n\nvar decrementCounter = function decrementCounter(area) {\n  counter[area]--;\n}; // TODO: Enhancement we could catch here errors and throw an Event in case there's an HTTP Error\n// then the consumer of this event can be listening and decide what to to in case of error","map":null,"metadata":{},"sourceType":"script"}