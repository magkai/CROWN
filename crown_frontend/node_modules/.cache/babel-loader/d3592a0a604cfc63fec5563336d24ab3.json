{"ast":null,"code":"var _jsxFileName = \"/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport QuestionForm from './QuestionForm';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      answers: [],\n      turn: -1\n    };\n\n    this.handleSubmit = question => {\n      this.setState({\n        questions: [...this.state.questions, question]\n      }, () => {\n        fetch(\"http://localhost:5000/getanswer\", {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            credentials: 'same-origin'\n          },\n          method: 'post',\n          body: JSON.stringify({\n            \"questions\": this.state.questions\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            console.log(\"ERROR when calling REST Api, response was:\" + response);\n            throw new Error('ERROR when calling REST Api');\n          }\n        }).then(data => this.setState({\n          answers: [...this.state.answers, data]\n        }, () => {\n          this.setState({\n            turn: this.state.turn + 1\n          }, () => {\n            this.hasAnswer = true;\n          });\n        })).catch(error => this.setState({\n          error\n        }, () => {\n          console.log(\"ERROR when calling REST Api: \" + error);\n        }));\n      });\n    };\n  }\n\n  render() {\n    if (this.state.turn >= 0) {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        question: this.state.questions[this.state.turn],\n        answers: this.state.answers[this.state.turn],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nconst TableBody = props => {\n  //this.hasAnswer = false;\n  console.log(props.answers);\n  const rows = props.answers.map((answer, index) => {\n    return React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Rank \", index, \" : \", answer));\n  });\n  return React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Result for: \", props.question))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, rows));\n};\n\nexport default App;","map":{"version":3,"sources":["/local/home/mkaiser/Documents/TREC_CAsT/demo/treccast-app/src/App.js"],"names":["React","Component","Table","Form","QuestionForm","App","state","questions","answers","turn","handleSubmit","question","setState","fetch","headers","credentials","method","body","JSON","stringify","then","response","ok","json","console","log","Error","data","hasAnswer","catch","error","render","TableBody","props","rows","map","answer","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\nimport QuestionForm from './QuestionForm'\n\n\n\n\nclass App extends Component {\n  \n \n    state = {\n        questions:  [],\n          answers: [],\n          turn: -1\n        };\n    \n   \n    \n    handleSubmit = question => { \n     \n    this.setState({ questions: [...this.state.questions,question] }, () => {\n        \n        fetch(\"http://localhost:5000/getanswer\", {\n             headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json', credentials: 'same-origin'},\n\n        method: 'post', body: JSON.stringify({\"questions\" : this.state.questions })\n          }).then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n                console.log(\"ERROR when calling REST Api, response was:\" + response);\n              throw new Error('ERROR when calling REST Api');\n            }\n          })\n          .then(data =>this.setState({ answers:  [...this.state.answers,data] }, () => {\n              this.setState({turn: this.state.turn+1}, () => {\n                  this.hasAnswer = true;\n            \n              });\n          }))\n          .catch(error => this.setState({ error }, () => {\n              console.log(\"ERROR when calling REST Api: \" + error);\n          }));\n\n      \n    });\n    \n    \n }\n \n    \n    \n\n\n\n render() {\n     \n   if(this.state.turn >= 0) {\n       return (\n        <div className=\"container\">\n        <Form handleSubmit={this.handleSubmit} />      \n        <TableBody question={this.state.questions[this.state.turn]} answers={this.state.answers[this.state.turn]}/>\n        </div>\n      ); \n   }else {\n       return (\n        <div className=\"container\">\n        <Form handleSubmit={this.handleSubmit} /> \n       \n        </div>\n      ); \n   }\n    \n      \n      \n  \n    \n  \n  \n};\n}\n  \nconst TableBody = props  => {\n    \n    //this.hasAnswer = false;\n    \n    console.log(props.answers);\n      const rows = props.answers.map((answer, index) => {\n         return(\n         <tr key={index}>\n                    \n                    <td>Rank {index} : {answer}</td>\n                </tr>\n                );\n     });\n    \n     return (\n \n             <table>\n                <thead>\n                    <tr>\n                        <th>Result for: {props.question}</th>\n                    </tr>\n                </thead>\n                <tbody>{rows}</tbody>\n            </table>\n            );\n    \n  };\n  \n  \nexport default App\n"]},"metadata":{},"sourceType":"module"}